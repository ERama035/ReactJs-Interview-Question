java script:

1) A closure is a function bundled together with references to its surrounding state, allowing it to access variables from its outer scope even after that scope has exited.
When you define a function inside another function, the inner function has access to:

Its own variables
The variables of the outer function
Global variables
If the inner function is returned or passed elsewhere, it "remembers" the environment in which it was created. This preserved environment is called a closure.

2) difference bet ween let and var :
var is function-scoped and can be redeclared;
let is block-scoped and cannot be redeclared in the same scope.

Feature	var	let
Scope	Function-scoped	Block-scoped (within {})
Hoisting	Hoisted and initialized as undefined	Hoisted but not initialized
Redeclaration	Can be redeclared in the same scope	Cannot be redeclared in the same scope
Reassignment	Can be reassigned	Can be reassigned
Global Object	Declared in global scope, becomes property of window	Does not become property of window

3) 
Es6 Feature	Description:
--------------------------------
Classes	Class-based OOP syntax
Promises	Asynchronous programming
Arrow Functions	Short, lexically-scoped functions
let, const	Block-scoped variable declarations
Default Parameters	Function parameters with default values
Modules	Native import/export


4) what is event loop in java script with precedence ?..
The event loop lets JavaScript handle async operations by processing microtasks (like Promises) before macrotasks (like setTimeout), ensuring efficient and predictable execution order.

5) callback vs promise vs Async/await:
->A callback is a function that is passed as an argument to another function and is executed after the first function completes its operation. 
and retunts an method or funtions

-> A promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
and it retuns a values (or) promise object. Promises provide a simpler way to handle asynchronous operations compared to callbacks
by allowing you to chain multiple operations together and handle errors in a more elegant way.

-> Async/await is the await keyword to wait for a promise to resolve before continuing with the execution with the async keyword, that returns a promise.

async function getData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const data = 'Some data';
      resolve(data);
    }, 1000);
  });
}


6) what is deep nesting java scipt ?..
Nested functions are one funcion inside of another function.
Defining a function inside another function


7) waht is object prototyping ?..
The mechanisum in the java sciprt object inherit properties and methods from a "prototype" object. Every object in JavaScript has a built-in property, which is called its prototype.
In JavaScript - objects inherit properties and methods from a "prototype" object, which forms a prototype chain

8) what is event bubling and event capturing ?..

-> Event bubling (child to parent) is the process when an event riggered on a child element propogates (bubles up) to its parenet elements in the DOM hierarchy.
Example the button click on the DIV element , the event handlers on the button will trigger the DIV element in turn trigger the DIV block.

-> Event Handling: The entire system of detecting, listening for, and responding to event

-> Event Capturing: (parent to child) Direction: From the outermost element to the downwards to the target element.
example : the button click on the DIV element both has event handlers, if clicking on the button will trigger the DIV element first , next button

9) what is curlly functions ?.. 
Currly functions are the nested function each of which takes a single arguments.

10) what is object restructing ?..
JavaScript is a feature that allows you to extract properties from objects and bind them to variables,other objects into distinct variables,


11) for of loop  ?..for loop woth cont , var, map
for-each vs for-in  ?.. both are for iterating the data-structure, a)for-each is used for callbacks b) for-in is used for looping the datastructure.

12) fetch api vs axios ?..
-> fetch api is an built-in java script api for making http requests, used for small applications, which returns Promises.
-> Is A popular Third-party Javascript library for making http requests, used for larger applications, and returns Promises.


what is shallow copy vs deep copy ?..
    shallow copy:
	const original = { a: 1, b: { c: 2 } };
    const shallowCopy = { ...original };
	deep copy:
	    const original = { a: 1, b: { c: 2 } };
    const shallowCopy = Object.assign({}, original);

map vs reduce ?..
-> use when you want to transform to each element and get an new array -> map -> transform each element 
-> use when you want to combine all elements into a single value -> reduce -> aggregate/combine elements.

-----------------------------------------------------------------
react 
1) functional hooks: with number of paramaters.
usestate, use effect, useselector, usereducer, usememo , usecallback, usecontext, useref, userIMperativehandle, uselayoutEffect, useDebugValue

2) class based lifecylce :
order: constructor , componentDidmount, ComponentDidupdate, CompnentUnmounting

3) can we use hooks in the class based component ?.. no , we can use only in function components
4) can we assign var to the hooks ?.. no
5) React is declarative js ?.. yes

6) Scenario : without using the ifelse statement , how to use useEffect based on the count.
	useEffect(()=>{
		if(count < 5) return;
		console.log('count is 5 or more');
	},[count]);

1) 
2) mantram :hrim kamala vasinya swaha
3) yantram : 


7) pure components ?.. 
1) use React.PureComponent
2) A Pure Component in React only re-renders when its props or state change, thanks to shallow comparison, helping improve performance and efficiency.

8) what are contollered and not controlledcomponent ?..
Controlled -> React Manages the avlues via state
UnControlled

9) hoc components ?..
A Higher-Order Component (HOC) in React is a function that takes a component/function 
and returns a new component with extra capabilities, making it easy to share logic  and state, props etc 
and features across your app.

React.memo	Memoizes functional components	React (built-in)
connect ->	Connects to Redux store	react-redux
withRouter	-> Injects router props	react-router-dom v5
withTranslation -> 	Injects translation functions	react-i18next
withTheme	-> Injects theme props	styled-components, MUI

-------------------------------------------------------------------
redux: 
reducer : takes an action (type), state 
    and dispatch that actionwe get the result.
	use selector we get the updated value.
	
redux: list of methods in reducers	
slices : asynch, 
reducer : 


mapDispatchtoprops
MapStateTOprops
mapPropsToValues
getderivedstatefromProps ? ..


react lazy loading ?..
react.lazy.

react code splitting ?.. 


what re react profilers , react portals , renderprops , 

react will have pure functions ?..


when to useRef hook ?..



------------------------------------------------------------------
html : list of meta tags, semantic

css : flex and its properties
1) box model
2) positioning and relative

java scipt:
let vs var
types of hosting.
rest operator vs spread operator

-------------------------------------------------------------------
middleware : it allow to intercetp the changes.
thunk : yes.
saga :

1) redux tool kit - > 


when we prefer to use context api vs redux.

when to use redux state or global state ?..

global store (single source of store ) , reducers , 

useDispatch vs useSelector ?..


useEffect with depencency array ?..
